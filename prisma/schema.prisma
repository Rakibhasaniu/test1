

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id  @default(uuid())
  username       String    
  email          String    @unique
  password       String
  profilePhoto  String?
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  admin              Admin?
  flatRequests   FlatRequest[]
  flat          Flat[]


  // @@map("user")
}
model Admin {
  id             String       @id  @default(uuid())
  username          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

}
model Flat {
  id             String       @id  @default(uuid())
  location       String
  description    String
  rentAmount     Float
  bedrooms       Int
  amenities      String[]
  photos      Photo[] 
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId        String

  user          User      @relation(fields: [userId], references: [id])
  flatRequest       FlatRequest[]
}
model Photo {
  id      String    @id @default(uuid())
  imageUrl String
  flatId  String
  flat    Flat   @relation(fields: [flatId], references: [id])
}
model FlatRequest {
  id              String       @id  @default(uuid())
  userId         String
  flatId         String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation( fields: [userId], references: [id])
  flat           Flat      @relation(fields: [flatId], references: [id])
}




enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}



enum UserRole {
  SUPER_ADMIN
  ADMIN
  SELLER
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}